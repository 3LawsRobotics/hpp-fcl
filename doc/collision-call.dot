digraph CD  {

	rankdir = BT
	compound=true
        size = 11.7

        "bool OBB::overlap(const OBB& other,\nFCL_REAL& sqrDistLowerBound) const" [shape = box]
        "bool OBBRSS::overlap(const OBB& other,\nFCL_REAL& sqrDistLowerBound) const" [shape = box]
        "bool overlap(const Matrix3f& R0, const Vec3f& T0,\n const OBB& b1, const OBB& b2, FCL_REAL& sqrDistLowerBound)" [shape = box]
        "bool overlap(const Matrix3f& R0, const Vec3f& T0,\n const OBBRSS& b1, const OBBRSS& b2, FCL_REAL& sqrDistLowerBound)" [shape = box]
        "bool BVNode::overlap(const BVNode& other,\nFCL_REAL& sqrDistLowerBound) const" [shape = box]
        "bool BVHCollisionTraversalNode::BVTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" [shape = box]
        "bool CollisionTraversalNodeBase::BVTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" [shape = box]
        "void collide(CollisionTraversalNodeBase* node,\n FCL_REAL& sqrDistLowerBound, BVHFrontList* front_list)" [shape = box]
        "void collisionRecurse(CollisionTraversalNodeBase* node,\n int b1, int b2, BVHFrontList* front_list, FCL_REAL& sqrDistLowerBound)" [shape = box]
        "void propagateBVHFrontListCollisionRecurse(CollisionTraversalNodeBase* node\n, BVHFrontList* front_list, FCL_REAL& sqrDistLowerBound)" [shape = box]
        "template<typename BV> static inline void\n meshCollisionOrientedNodeLeafTesting(int b1, int b2, const BVHModel<BV>* model1,\n const BVHModel<BV>* model2, Vec3f* vertices1, Vec3f* vertices2,\n Triangle* tri_indices1, Triangle* tri_indices2, const Matrix3f& R,\n const Vec3f& T, const Transform3f& tf1, const Transform3f& tf2,\n bool enable_statistics, FCL_REAL cost_density, int& num_leaf_tests,\n const CollisionRequest& request, CollisionResult& result, FCL_REAL& sqrDistLowerBound)" [shape = box]
        "void MeshCollisionTraversalNodeOBB::leafTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" [shape = box]
        "void MeshCollisionTraversalNodeRSS::leafTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" [shape = box]
        "void MeshCollisionTraversalNodekIOS::leafTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" [shape = box]
        "bool MeshCollisionTraversalNodeOBBRSS::BVTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" [shape = box]
        "void MeshCollisionTraversalNodeOBBRSS::leafTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" [shape = box]
        "CollisionTraversalNodeBase::leafTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" [shape = box]
        "bool obbDisjointAndLowerBoundDistance\n(const Matrix3f& B, const Vec3f& T, const Vec3f& a, const Vec3f& b,\n FCL_REAL& squaredLowerBoundDistance)" [shape = box]

        "bool OBB::overlap(const OBB& other,\nFCL_REAL& sqrDistLowerBound) const" -> "bool obbDisjointAndLowerBoundDistance\n(const Matrix3f& B, const Vec3f& T, const Vec3f& a, const Vec3f& b,\n FCL_REAL& squaredLowerBoundDistance)"
        "bool overlap(const Matrix3f& R0, const Vec3f& T0,\n const OBB& b1, const OBB& b2, FCL_REAL& sqrDistLowerBound)" -> "bool obbDisjointAndLowerBoundDistance\n(const Matrix3f& B, const Vec3f& T, const Vec3f& a, const Vec3f& b,\n FCL_REAL& squaredLowerBoundDistance)"
        "bool overlap(const Matrix3f& R0, const Vec3f& T0,\n const OBBRSS& b1, const OBBRSS& b2, FCL_REAL& sqrDistLowerBound)" -> "bool overlap(const Matrix3f& R0, const Vec3f& T0,\n const OBB& b1, const OBB& b2, FCL_REAL& sqrDistLowerBound)"
        "void collide(CollisionTraversalNodeBase* node,\n FCL_REAL& sqrDistLowerBound, BVHFrontList* front_list)"-> "void propagateBVHFrontListCollisionRecurse(CollisionTraversalNodeBase* node\n, BVHFrontList* front_list, FCL_REAL& sqrDistLowerBound)"
        "void collide(CollisionTraversalNodeBase* node,\n FCL_REAL& sqrDistLowerBound, BVHFrontList* front_list)" -> "void collisionRecurse(CollisionTraversalNodeBase* node,\n int b1, int b2, BVHFrontList* front_list, FCL_REAL& sqrDistLowerBound)"
        "void collisionRecurse(CollisionTraversalNodeBase* node,\n int b1, int b2, BVHFrontList* front_list, FCL_REAL& sqrDistLowerBound)" -> "bool CollisionTraversalNodeBase::BVTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const"
        "void collisionRecurse(CollisionTraversalNodeBase* node,\n int b1, int b2, BVHFrontList* front_list, FCL_REAL& sqrDistLowerBound)" -> "CollisionTraversalNodeBase::leafTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const"
        "void propagateBVHFrontListCollisionRecurse(CollisionTraversalNodeBase* node\n, BVHFrontList* front_list, FCL_REAL& sqrDistLowerBound)" -> "void collisionRecurse(CollisionTraversalNodeBase* node,\n int b1, int b2, BVHFrontList* front_list, FCL_REAL& sqrDistLowerBound)"
        "void propagateBVHFrontListCollisionRecurse(CollisionTraversalNodeBase* node\n, BVHFrontList* front_list, FCL_REAL& sqrDistLowerBound)" -> "bool CollisionTraversalNodeBase::BVTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const"
        "void MeshCollisionTraversalNodeOBB::leafTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const"-> "template<typename BV> static inline void\n meshCollisionOrientedNodeLeafTesting(int b1, int b2, const BVHModel<BV>* model1,\n const BVHModel<BV>* model2, Vec3f* vertices1, Vec3f* vertices2,\n Triangle* tri_indices1, Triangle* tri_indices2, const Matrix3f& R,\n const Vec3f& T, const Transform3f& tf1, const Transform3f& tf2,\n bool enable_statistics, FCL_REAL cost_density, int& num_leaf_tests,\n const CollisionRequest& request, CollisionResult& result, FCL_REAL& sqrDistLowerBound)"
      "void MeshCollisionTraversalNodeRSS::leafTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" -> "template<typename BV> static inline void\n meshCollisionOrientedNodeLeafTesting(int b1, int b2, const BVHModel<BV>* model1,\n const BVHModel<BV>* model2, Vec3f* vertices1, Vec3f* vertices2,\n Triangle* tri_indices1, Triangle* tri_indices2, const Matrix3f& R,\n const Vec3f& T, const Transform3f& tf1, const Transform3f& tf2,\n bool enable_statistics, FCL_REAL cost_density, int& num_leaf_tests,\n const CollisionRequest& request, CollisionResult& result, FCL_REAL& sqrDistLowerBound)"
      "void MeshCollisionTraversalNodekIOS::leafTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" -> "template<typename BV> static inline void\n meshCollisionOrientedNodeLeafTesting(int b1, int b2, const BVHModel<BV>* model1,\n const BVHModel<BV>* model2, Vec3f* vertices1, Vec3f* vertices2,\n Triangle* tri_indices1, Triangle* tri_indices2, const Matrix3f& R,\n const Vec3f& T, const Transform3f& tf1, const Transform3f& tf2,\n bool enable_statistics, FCL_REAL cost_density, int& num_leaf_tests,\n const CollisionRequest& request, CollisionResult& result, FCL_REAL& sqrDistLowerBound)"
"bool MeshCollisionTraversalNodeOBBRSS::BVTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" -> "bool overlap(const Matrix3f& R0, const Vec3f& T0,\n const OBBRSS& b1, const OBBRSS& b2, FCL_REAL& sqrDistLowerBound)"
      "void MeshCollisionTraversalNodeOBBRSS::leafTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" -> "template<typename BV> static inline void\n meshCollisionOrientedNodeLeafTesting(int b1, int b2, const BVHModel<BV>* model1,\n const BVHModel<BV>* model2, Vec3f* vertices1, Vec3f* vertices2,\n Triangle* tri_indices1, Triangle* tri_indices2, const Matrix3f& R,\n const Vec3f& T, const Transform3f& tf1, const Transform3f& tf2,\n bool enable_statistics, FCL_REAL cost_density, int& num_leaf_tests,\n const CollisionRequest& request, CollisionResult& result, FCL_REAL& sqrDistLowerBound)"
      "bool CollisionTraversalNodeBase::BVTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" -> "bool MeshCollisionTraversalNodeOBBRSS::BVTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" [color=red]
      "CollisionTraversalNodeBase::leafTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" -> "void MeshCollisionTraversalNodeOBB::leafTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" [color=red]
      "CollisionTraversalNodeBase::leafTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" -> "void MeshCollisionTraversalNodeRSS::leafTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" [color=red]
      "CollisionTraversalNodeBase::leafTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" -> "void MeshCollisionTraversalNodekIOS::leafTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" [color=red]
      "CollisionTraversalNodeBase::leafTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" -> "void MeshCollisionTraversalNodeOBBRSS::leafTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" [color=red]
      "bool CollisionTraversalNodeBase::BVTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" -> "bool BVHCollisionTraversalNode::BVTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" [color = red]
      "bool OBBRSS::overlap(const OBB& other,\nFCL_REAL& sqrDistLowerBound) const" -> "bool OBB::overlap(const OBB& other,\nFCL_REAL& sqrDistLowerBound) const"
      "bool BVNode::overlap(const BVNode& other,\nFCL_REAL& sqrDistLowerBound) const" -> "bool OBB::overlap(const OBB& other,\nFCL_REAL& sqrDistLowerBound) const"
      "bool BVHCollisionTraversalNode::BVTesting\n(int b1, int b2, FCL_REAL& sqrDistLowerBound) const" -> "bool BVNode::overlap(const BVNode& other,\nFCL_REAL& sqrDistLowerBound) const"
}